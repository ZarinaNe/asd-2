# Задача о суммах подмножеств (Subset Sum Problem) заключается в поиске подмножества элементов из данного набора, которое имеет
# сумму, равную заданной цели. Мы можем использовать жадный алгоритм для решения этой задачи, предполагая, что мы выбираем элементы
# максимально возможных значений, которые не превышают цель, пока не достигнем цели или пройдем по всем элементам.

#код сначала сортирует элементы по убыванию, затем проходит по отсортированным элементам, добавляя их в подмножество, если это не приводит
# к превышению цели. Если сумма подмножества достигает цели, алгоритм завершается. Если ни одно подходящее подмножество не найдено,
# возвращается None.

# Функция для решения задачи о суммах подмножеств с использованием жадного алгоритма
def subset_sum_greedy(numbers, target_sum):
    # Сортируем элементы по убыванию
    numbers.sort(reverse=True)

    subset = []  # Инициализируем пустое подмножество
    current_sum = 0  # Инициализируем текущую сумму

    for num in numbers:
        # Если текущая сумма плюс текущий элемент не превышают цель,
        # то добавляем элемент в подмножество и обновляем текущую сумму
        if current_sum + num <= target_sum:
            subset.append(num)
            current_sum += num

        # Если текущая сумма равна цели, мы нашли нужное подмножество
        if current_sum == target_sum:
            return subset

    # Если подходящее подмножество не найдено, возвращаем None
    return None


# Пример использования
numbers = [10, 7, 5, 18, 12, 20, 15]
target_sum = 35

result = subset_sum_greedy(numbers, target_sum)

if result:
    print(f"Подмножество суммируется до {target_sum}: {result}")
else:
    print(f"Не удалось найти подмножество суммируется до {target_sum}")